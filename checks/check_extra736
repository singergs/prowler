#!/usr/bin/env bash

# Prowler - the handy cloud security tool (copyright 2018) by Toni de la Fuente
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy
# of the License at http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed
# under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
# CONDITIONS OF ANY KIND, either express or implied. See the License for the
# specific language governing permissions and limitations under the License.
CHECK_ID_extra736="7.36"
CHECK_TITLE_extra736="[extra736] Check exposed KMS keys"
CHECK_SCORED_extra736="NOT_SCORED"
CHECK_CIS_LEVEL_extra736="EXTRA"
CHECK_SEVERITY_extra736="Critical"
CHECK_ASFF_RESOURCE_TYPE_extra736="AwsKmsKey"
CHECK_ALTERNATE_check736="extra736"
CHECK_ASFF_COMPLIANCE_TYPE_extra736="ens-op.exp.11.aws.kms.2"
CHECK_SERVICENAME_extra736="kms"
CHECK_RISK_extra736='Exposed KMS Keys or wide policy permissions my leave data unprotected.'
CHECK_REMEDIATION_extra736='To determine the full extent of who or what currently has access to a customer master key (CMK) in AWS KMS; you must examine the CMK key policy; all grants that apply to the CMK; and potentially all AWS Identity and Access Management (IAM) policies. You might do this to determine the scope of potential usage of a CMK.'
CHECK_DOC_extra736='https://docs.aws.amazon.com/kms/latest/developerguide/determining-access.html'
CHECK_CAF_EPIC_extra736='Data Protection'

extra736(){
  for regx in $REGIONS; do
    local CUSTOMER_MANAGED_KMS_KEYS=()
    # First, we need to recover every KMS key
    LIST_OF_KMS_KEYS=$($AWSCLI kms list-keys $PROFILE_OPT --region "${regx}" --query "Keys[].[KeyArn]" --output text)
    if [[ $LIST_OF_KMS_KEYS ]]
    then
      # Second, we need to check for Customer Managed KMS keys, with or without a configured alias
      for keyID in ${LIST_OF_KMS_KEYS}
      do
        KMS_KEY_MANAGER=$($AWSCLI kms describe-key $PROFILE_OPT --region "${regx}" --key-id "${keyID}" --query "KeyMetadata.KeyManager" --output text)
        if [[ "${KMS_KEY_MANAGER}" == "CUSTOMER" ]]
        then 
          CUSTOMER_MANAGED_KMS_KEYS+=( "${keyID}" )
        fi
      done
    else
      textInfo "${regx}: No KMS keys found" "${regx}"
      continue
    fi

    # Third, we need to check the policy included in every Customer Managed KMS key
    if [[ "${CUSTOMER_MANAGED_KMS_KEYS[*]}" ]]
    then
      for keyID in "${CUSTOMER_MANAGED_KMS_KEYS[@]}"
      do
        CHECK_POLICY=$($AWSCLI kms get-key-policy --key-id "${keyID}" --policy-name default $PROFILE_OPT --region "${regx}" --output text | jq '.Statement[]|select(.Effect=="Allow" and (((.Principal|type == "object") and .Principal.AWS == "*") or ((.Principal|type == "string") and .Principal == "*")) and .Condition == null)')
        if [[ $CHECK_POLICY ]]; then
          textFail "${regx}: KMS key ${keyID} may be publicly accessible!" "${regx}" "${keyID}"
        else
          textPass "${regx}: KMS key ${keyID} is not exposed to Public" "${regx}" "${keyID}"
        fi
      done
    else
      textInfo "${regx}: No Customer Managed KMS keys found" "${regx}"
    fi
  done
}
